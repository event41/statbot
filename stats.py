# stats.py# -*- coding: utf-8 -*-import timefrom sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmakerfrom sqlalchemy import selectfrom datetime import datetimefrom database_manager import TradeModel, AsyncSessionFactoryasync def calculate_stats(bot_id="CB-1", period="all"):    now = int(time.time())    if period == "week":        start_time = now - 7 * 86400    elif period == "month":        start_time = now - 30 * 86400    elif period == "180days":        start_time = now - 180 * 86400    elif period == "year":        start_time = now - 365 * 86400    else:        start_time = 0  # ← Это ключевое изменение: берём **всю историю**    async with AsyncSessionFactory() as session:        result = await session.execute(            select(TradeModel).where(                TradeModel.bot_id == bot_id,                TradeModel.timestamp >= start_time            )        )        trades = result.scalars().all()    total_profit = sum(t.profit for t in trades)    win_count = sum(1 for t in trades if t.profit > 0)    loss_count = sum(1 for t in trades if t.profit < 0)    total_trades = win_count + loss_count    win_rate = win_count / total_trades * 100 if total_trades else 0    max_drawdown = min((t.profit for t in trades if t.profit < 0), default=0)    first_trade_time = trades[0].timestamp if trades else now    last_trade_time = now    return {        "bot_id": bot_id,        "total_profit": round(total_profit, 2),        "win_rate": round(win_rate, 2),        "loss_rate": round(100 - win_rate, 2),        "max_drawdown": round(max_drawdown, 2),        "total_trades": total_trades,        "first_trade_time": first_trade_time,        "last_trade_time": last_trade_time    }